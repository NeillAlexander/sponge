/**
 * Copyright (c) Neill Alexander. All rights reserved.
 * The use and distribution terms for this software are covered by the
 * Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
 * which can be found in the file epl-v10.html at the root of this distribution.
 * By using this software in any fashion, you are agreeing to be bound by
 * the terms of this license.
 * You must not remove this notice, or any other, from this software
 */
package com.nwalex.sponge.gui;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.Map;
import java.util.WeakHashMap;
import javax.swing.AbstractAction;
import javax.swing.JFrame;
import javax.swing.JPopupMenu;
import org.apache.log4j.Logger;

/**
 *
 * @author neill
 */
public class SpongeGUI extends javax.swing.JFrame {

  private int sessionCounter = 1;
  private final SpongeController controller;
  private HelpManager helper;
  private static final Logger log = Logger.getLogger(SpongeGUI.class);
  
  private Map<SpongeSessionController, SpongeSessionPanel> sessionMap =
          new WeakHashMap<SpongeSessionController, SpongeSessionPanel>();
  private Map<Component, SpongeSessionController> tabToControllerMap =
          new WeakHashMap<Component, SpongeSessionController>();

  /** Creates new form SpongeGUI */
  public SpongeGUI(final SpongeController controller) {
    this.controller = controller;
    this.helper = new HelpManager(this);

    initComponents();

    setExtendedState(JFrame.MAXIMIZED_BOTH);
  }

  public void updateSelectedMode(final SpongeSessionController controller) {
    if (sessionMap.containsKey(controller)) {
      sessionMap.get(controller).updateSelectedMode(controller);
    } else {
      log.warn("updateSelectedMode called for " + controller + " but I don't have a reference to it!");
    }
  }

  public void setSessionInfo(SpongeSessionController sessionController, String info) {
    if (sessionMap.containsKey(sessionController)) {
      sessionMap.get(sessionController).setSessionInfo(info);
    } else {
      log.warn("setSessionInfo called for " + sessionController + " but I don't have a reference to it!");
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    sessionTabs = new javax.swing.JTabbedPane();
    menuBar = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem2 = new javax.swing.JMenuItem();
    serverMenu = new javax.swing.JMenu();
    replMenu = new javax.swing.JMenu();
    replMenuItem = new javax.swing.JMenuItem();
    replMenuItem.setAction(controller.getStartReplAction());
    jMenu2 = new javax.swing.JMenu();
    keyboardShortcutsHelp = new javax.swing.JMenuItem();
    jMenuItem1 = new javax.swing.JMenuItem();
    aboutMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    sessionTabs.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        displayTabPopup(evt);
      }
      public void mousePressed(java.awt.event.MouseEvent evt) {
        sessionTabsMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        sessionTabsMouseReleased(evt);
      }
    });
    getContentPane().add(sessionTabs, java.awt.BorderLayout.CENTER);

    jMenu1.setText("Workspace");

    jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    jMenuItem2.setText("New Session");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addSession(evt);
      }
    });
    jMenu1.add(jMenuItem2);

    menuBar.add(jMenu1);

    serverMenu.setText("Server");
    menuBar.add(serverMenu);

    replMenu.setText("REPL");

    replMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
    replMenuItem.setText("Start REPL");
    replMenu.add(replMenuItem);

    menuBar.add(replMenu);

    jMenu2.setText("Help");

    keyboardShortcutsHelp.setAction(helper.makeMenuAction("manual.html"));
    keyboardShortcutsHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
    keyboardShortcutsHelp.setText("Manual");
    jMenu2.add(keyboardShortcutsHelp);

    jMenuItem1.setAction(helper.makeMenuAction("plugins.html"));
    jMenuItem1.setText("Writing Plugins");
    jMenu2.add(jMenuItem1);

    aboutMenuItem.setText("About");
    aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        aboutMenuItemActionPerformed(evt);
      }
    });
    jMenu2.add(aboutMenuItem);

    menuBar.add(jMenu2);

    setJMenuBar(menuBar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
      AboutDialog ad = new AboutDialog(this, true);
      ad.setLocationRelativeTo(null);
      ad.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void addSession(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSession
      final SpongeSessionController sessionController = controller.createNewSession();
      sessionMap.put(sessionController, new SpongeSessionPanel(this, sessionController));
      sessionTabs.add(sessionMap.get(sessionController), "Session " + (sessionCounter++));
      tabToControllerMap.put(sessionTabs.getComponentAt(sessionTabs.getTabCount() - 1), sessionController);
      sessionController.updateSessionInfo();
      this.validate();
    }//GEN-LAST:event_addSession

    private void displayTabPopup(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayTabPopup
      if (evt.isPopupTrigger()) {
        final JPopupMenu menu = new JPopupMenu();
        final Component tab =
                sessionTabs.getComponentAt(sessionTabs.indexAtLocation(evt.getX(), evt.getY()));

        menu.add(new AbstractAction("Close") {
          @Override
          public void actionPerformed(ActionEvent e) {
            sessionTabs.remove(tab);
            controller.deleteSession(tabToControllerMap.get(tab));
            sessionMap.remove(tabToControllerMap.get(tab));
            tabToControllerMap.remove(tab);
          }
        });
        
        menu.show(sessionTabs, evt.getX(), evt.getY());
      }
    }//GEN-LAST:event_displayTabPopup

    private void sessionTabsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sessionTabsMousePressed
      displayTabPopup(evt);
    }//GEN-LAST:event_sessionTabsMousePressed

    private void sessionTabsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sessionTabsMouseReleased
      displayTabPopup(evt);
    }//GEN-LAST:event_sessionTabsMouseReleased

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem keyboardShortcutsHelp;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JMenu replMenu;
  private javax.swing.JMenuItem replMenuItem;
  private javax.swing.JMenu serverMenu;
  private javax.swing.JTabbedPane sessionTabs;
  // End of variables declaration//GEN-END:variables
}
