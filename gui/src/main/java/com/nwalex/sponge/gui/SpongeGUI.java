/**
 * Copyright (c) Neill Alexander. All rights reserved.
 * The use and distribution terms for this software are covered by the
 * Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
 * which can be found in the file epl-v10.html at the root of this distribution.
 * By using this software in any fashion, you are agreeing to be bound by
 * the terms of this license.
 * You must not remove this notice, or any other, from this software
 */
package com.nwalex.sponge.gui;

import com.nwalex.sponge.gui.plugins.PluginController;
import java.awt.event.ActionEvent;
import java.util.Enumeration;
import javax.swing.AbstractAction;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.JFrame;
import org.apache.log4j.Logger;

/**
 *
 * @author neill
 */
public class SpongeGUI extends javax.swing.JFrame {

  private HelpManager helper;
  private static final Logger log = Logger.getLogger(SpongeGUI.class);  

  /** Creates new form SpongeGUI */
  public SpongeGUI(final SpongeGUIController controller, final PluginController pluginController) {
    this.helper = new HelpManager(this);

    initComponents();

    setExtendedState(JFrame.MAXIMIZED_BOTH);
  }

  public void updateSelectedMode(final SpongeGUIController controller) {
    // set the mode
    Enumeration<AbstractButton> en = modeButtonGroup.getElements();
    while (en.hasMoreElements()) {
      AbstractButton button = en.nextElement();
      if (button.getActionCommand().equals(controller.getMode())) {
        modeButtonGroup.setSelected(button.getModel(), true);
      }
    }
  }

  private Action getLoadSessionAction() {
    return new AbstractAction() {

      @Override
      public void actionPerformed(ActionEvent e) {
        controller.getLoadAction().actionPerformed(e);
        updateSelectedMode(controller);
      }
    };
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    modeButtonGroup = new javax.swing.ButtonGroup();
    menuBar = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    loadMenuItem = new javax.swing.JMenuItem();
    saveMenuItem = new javax.swing.JMenuItem();
    saveAsMenuItem = new javax.swing.JMenuItem();
    serverMenu = new javax.swing.JMenu();
    startServerMenuItem = new javax.swing.JMenuItem();
    startServerMenuItem.setAction(controller.getStartServerAction());
    stopServerMenuItem = new javax.swing.JMenuItem();
    stopServerMenuItem.setAction(controller.getStopServerAction());
    configureMenuItem = new javax.swing.JMenuItem();
    configureMenuItem.setAction(controller.getConfigureAction());
    modeMenu = new javax.swing.JMenu();
    forwardAllMenuItem = new javax.swing.JRadioButtonMenuItem();
    replayOrForwardMenuItem = new javax.swing.JRadioButtonMenuItem();
    replayOrFailMenuItem = new javax.swing.JRadioButtonMenuItem();
    pluginMenu = new javax.swing.JMenu();
    replMenu = new javax.swing.JMenu();
    replMenuItem = new javax.swing.JMenuItem();
    replMenuItem.setAction(controller.getStartReplAction());
    jMenu2 = new javax.swing.JMenu();
    keyboardShortcutsHelp = new javax.swing.JMenuItem();
    jMenuItem1 = new javax.swing.JMenuItem();
    aboutMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jMenu1.setText("File");

    loadMenuItem.setAction(getLoadSessionAction());
    loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    loadMenuItem.setText("Load Session...");
    jMenu1.add(loadMenuItem);

    saveMenuItem.setAction(controller.getSaveAction());
    saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    saveMenuItem.setText("Save Session");
    jMenu1.add(saveMenuItem);

    saveAsMenuItem.setAction(controller.getSaveAsAction());
    saveAsMenuItem.setText("Save Session As...");
    jMenu1.add(saveAsMenuItem);

    menuBar.add(jMenu1);

    serverMenu.setText("Server");

    startServerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
    startServerMenuItem.setText("Start Server");
    serverMenu.add(startServerMenuItem);

    stopServerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
    stopServerMenuItem.setText("Stop Server");
    serverMenu.add(stopServerMenuItem);

    configureMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PERIOD, java.awt.event.InputEvent.CTRL_MASK));
    configureMenuItem.setText("Configure...");
    serverMenu.add(configureMenuItem);

    menuBar.add(serverMenu);

    modeMenu.setText("Mode");

    forwardAllMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
    modeButtonGroup.add(forwardAllMenuItem);
    forwardAllMenuItem.setSelected(true);
    forwardAllMenuItem.setText("Forward All");
    forwardAllMenuItem.setActionCommand(SpongeGUIController.FORWARD_ALL);
    forwardAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        modeSelected(evt);
      }
    });
    modeMenu.add(forwardAllMenuItem);

    replayOrForwardMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
    modeButtonGroup.add(replayOrForwardMenuItem);
    replayOrForwardMenuItem.setText("Replay or Forward");
    replayOrForwardMenuItem.setActionCommand(SpongeGUIController.REPLAY_OR_FORWARD);
    replayOrForwardMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        replayOrForwardMenuItemActionPerformed(evt);
      }
    });
    modeMenu.add(replayOrForwardMenuItem);

    replayOrFailMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
    modeButtonGroup.add(replayOrFailMenuItem);
    replayOrFailMenuItem.setText("Replay or Fail");
    replayOrFailMenuItem.setActionCommand(SpongeGUIController.REPLAY_OR_FAIL);
    replayOrFailMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        replayOrFailMenuItemActionPerformed(evt);
      }
    });
    modeMenu.add(replayOrFailMenuItem);

    menuBar.add(modeMenu);

    pluginMenu.setText("Plugins");
    menuBar.add(pluginMenu);

    replMenu.setText("REPL");

    replMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
    replMenuItem.setText("Start REPL");
    replMenu.add(replMenuItem);

    menuBar.add(replMenu);

    jMenu2.setText("Help");

    keyboardShortcutsHelp.setAction(helper.makeMenuAction("manual.html"));
    keyboardShortcutsHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
    keyboardShortcutsHelp.setText("Manual");
    jMenu2.add(keyboardShortcutsHelp);

    jMenuItem1.setAction(helper.makeMenuAction("plugins.html"));
    jMenuItem1.setText("Writing Plugins");
    jMenu2.add(jMenuItem1);

    aboutMenuItem.setText("About");
    aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        aboutMenuItemActionPerformed(evt);
      }
    });
    jMenu2.add(aboutMenuItem);

    menuBar.add(jMenu2);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 802, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 578, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void modeSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeSelected
      controller.setMode(modeButtonGroup.getSelection().getActionCommand());
    }//GEN-LAST:event_modeSelected

    private void replayOrForwardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayOrForwardMenuItemActionPerformed
      modeSelected(evt);
    }//GEN-LAST:event_replayOrForwardMenuItemActionPerformed

    private void replayOrFailMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayOrFailMenuItemActionPerformed
      modeSelected(evt);
    }//GEN-LAST:event_replayOrFailMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
      AboutDialog ad = new AboutDialog(this, true);
      ad.setLocationRelativeTo(null);
      ad.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JMenuItem configureMenuItem;
  private javax.swing.JRadioButtonMenuItem forwardAllMenuItem;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem keyboardShortcutsHelp;
  private javax.swing.JMenuItem loadMenuItem;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.ButtonGroup modeButtonGroup;
  private javax.swing.JMenu modeMenu;
  private javax.swing.JMenu pluginMenu;
  private javax.swing.JMenu replMenu;
  private javax.swing.JMenuItem replMenuItem;
  private javax.swing.JRadioButtonMenuItem replayOrFailMenuItem;
  private javax.swing.JRadioButtonMenuItem replayOrForwardMenuItem;
  private javax.swing.JMenuItem saveAsMenuItem;
  private javax.swing.JMenuItem saveMenuItem;
  private javax.swing.JMenu serverMenu;
  private javax.swing.JMenuItem startServerMenuItem;
  private javax.swing.JMenuItem stopServerMenuItem;
  // End of variables declaration//GEN-END:variables
}
